Baixar
docker pull nextcloud

Para instalação do ambiente siga os passos em:
https://github.com/renatomportugal/docker/blob/master/02.Producao.md#servidor-padr%C3%A3o

__Configuração
Coloque IP fixo no computador para que consiga usar o collabora.
No meu pc é 192.168.1.115:8000
Escolha o nome de usuário e senha do administrador.
Em Armazenamento & banco de dados:
Pasta de dados: /var/www/html/data
Configurar o Banco de dados: MySQL/MariaDB
usuário de banco de dados: root
senha do banco de dados: my-password
nome do banco de dados: nextcloud
host do banco de dados: mysql.5.7
Desmarque a opção Instalar aplicativos recomendados
Aperte o botão Concluir configuração

_______________________________________________________________________________
APLICATIVOS (que estou usando)

__Collabora
https://github.com/renatomportugal/docker/blob/master/ImagensOficiais/collabora-code.txt

__Adicionar
Na engrenagem do lado direito, Aplicativos,
Menu do lado esquerdo (ícone de 3 barras horizontais sobrepostas), Aplicativos em destaque, 
ache o Collabora Online (3.7.3), botão Baixar e ativar.
Na engrenagem do lado direito, Configurações,
No lado esquedo, Collabora Online, 
Selecione "Usar seu próprio servidor"
Selecione "Desativar a verificação do certificado (inseguro)"
Colque o endereço do serviço do Collabora online
http://192.168.1.115:9980
Botão Salvar... (se der erro adicione as portas 8000 e 9980 no firewall)
Para testar abra um arquivo docx.

__Music
Na engrenagem do lado direito, Aplicativos,
Buscar, music, 

__Draw.io

__Mind Map

__Quick Notes

__Duplicate Finder

__Quota Warning

__Metadata
_______________________________________________________________________________
APLICATIVOS REPROVADOS
_Bookmarks
Pontos bons: Etiquetas e Anotações. Preview para fotos e videos.
Pontos Ruins: Não há como exportar nem importar.


_______________________________________________________________________________
APLICATIVOS (para testar)
Accessibility
Activity
Appointments
Auditing / Logging
_Automated PDF conversion

Brute-force settings
Calendar
Comments
_Contacts
Contacts Interaction
_Cookbook
_Cospend
_Custom Properties
_Deck
_Deleted files
Federation
_File access control
File sharing
First run wizard
_Flow upload
Forms
_Group folders
Log Reader
_Mail
_Maps
Monitoring
Nextcloud announcements
_Notes
Notifications
Password policy
PDF viewer
Photos
Privacy
Recommendations
_Retantion
Right click
Share by mail
Support
_Talk
Tasks
Text
Theming
Update notification
Usage survey
_User retention
Versions
Video player
Workflow external scripts
Default encryption module
External storage support
LDAP user and group backend

__Testando... não faça ainda
Instalar o app face recognition
1. pdlib
Como verificar?

https://github.com/goodspb/pdlib

docker exec -it 125 bash
apt-get update
apt-get install libbz2-dev
apt-get update
apt-get install libx11-dev
apt-get update
apt-get install libopenblas-dev liblapack-dev

__Install Dlib as shared library
cd /
mkdir mylib
cd mylib
apt-get install git
git clone https://github.com/davisking/dlib.git
cd dlib/dlib
mkdir build
cd build
apt-get install cmake
cmake -DBUILD_SHARED_LIBS=ON ..
make
make install

__Installation
cd /
mkdir mylib2
cd mylib2
git clone https://github.com/goodspb/pdlib.git
cd pdlib
phpize

-irá retornar:
Configuring for:
PHP Api Version:         20190902
Zend Module Api No:      20190902
Zend Extension Api No:   320190902

./configure --enable-debug
make

-deu uns warnings, mas instalou.

make install

__Configure PHP installation
nano youpath/php.ini

apt-get install nano
nano /usr/local/etc/php/php.ini

__Append the content below into php.ini
[pdlib]
extension="pdlib.so"

2. bz2

__Test
apt-get install php-bz2

erro: Package 'php-bz2' has no installation candidate

apt-get install software-properties-common
apt-get update
apt-get upgrade
sudo apt-get install libbz2-dev

/usr/local/bin/php-config --with-bz2

add-apt-repository ppa:ondrej/php
add-apt-repository ppa:ondrej/apache2

apt install software-properties-common
add-apt-repository ppa:deadsnakes/ppa

apt install python3.7
python3.7 --version

php -v

apt-cache search php7.3-*

apt-get install php5-dev php-pear

php --ini | grep "Loaded Configuration File"

nano /usr/local/etc/php/php.ini

apt install php7.3-bz2

apt install apt-transport-https lsb-release
apt-get install wget
wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
sh -c 'echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list' # Add Ondrej's repo to sources list. sudo apt update


make test

_______________________________________________________________________________
__CONFIGURAÇÕES________________________________________________________________
Autorizar domínio
docker ps -a
2d
docker stop 2d
Abra outra tela de terminal com Ctrl+Shift+T
Como o container não tem editor de texto, copiaremos o arquivo para fora, editaremos, depois devolveremos.
copie a pasta do container para o seu diretório atual
pode usar os dois primeiros dígitos
docker cp 2d:/var/www/html/config/config.php config.php

verifique se realmente copiou
ls -la

Abra-os para edição, destrave o terminal com &
gedit config.php &

Faça as alterações conforme a seguir, não substitua tudo, apenas complete com sua necessidade.
No meu caso adicionei o site "seuSite.com"

'trusted_domains' =>
array(
    0 => 'localhost',
    1 => 'seuSite.com'
)

Salve com Ctrl+S

Cole novamente dentro do container (não se esqueça que cd é o id do container) .
docker cp config.php 2d:/var/www/html/config/config.php

Mude o dono imediatamente (se mexer no site dará erro)
docker start 2d
docker exec -it 2d bash
cd config
ls -la
chown www-data config.php
ls -la

Reinicie o container...
docker restart 2d
________________________________________________
FAZENDO O BAKUP DOS DADOS (MySQL)
Faça o backup do banco de dados com o phpMyAdmin

docker stop 48
cd ~
mkdir ncMySQL
cd ncMySQL
docker stop 48
docker cp 48:/var/www/html ./

Compactar o arquivo
tar -czvf nc_html_mysql_20jun20.tar.gz html

Também deixe junto o arquivo sql
_______________________________________________________________________________
__A aplicação parou de funcionar.
Fiz o backup da pasta html e do banco.
Reinstalei normalmente, funcionou.
docker stop c5
docker cp ./ c5:/var/www/

Abra outra tela de terminal
docker start c5
docker exec -it c5 bash
cd /var/www/
mudar o dono de tudo
chown -R www-data html
ls -la
docker stop c5
Agora restore a base de dados no phpMyAdmin
docker start c5

Deu erro, agora estou tentando retornar a base de dados.
Também deu erro. Vou fazer novamente, mas copiando apenas a pasta de dados.
Deu erro de novo, e parece que não vai funcionar.

__Vou tentar restaurar a base de dados primeiro
Mexendo só na base não deu erro, mas precisa ver a restauração dos APPS.
Agora restaurar só a pasta data.
docker exec -it 2d bash
cd data
ls
docker stop 2d

Abra outro terminal
docker cp 2d:/var/www/html/data ./

agora acesse a pasta data do bacjup a restaurar
cd data

vamos copiar a pasta data para o servidor
docker cp ./ 2d:/var/www/html/data

Abra outro terminal
docker exec -it 2d bash
chown -R www-data data

Agora a pasta dos aplicativos
mv appdata_ochsuvqvqiwm/ appdata_oclhjk56fpwo/

Ainda está funcionando, precisamos fazer mais testes.
_______________________________________________________________________________
__TABELAS MYSQL________________________________________________________________
oc_group_user - usuários admin

_______________________________________________________________________________
__RECUPERAR ADMIN______________________________________________________________
Logue com uma conta normar, substitua em oc_group_user,  altere a senha do admin padrão,
volte a tabela com o nome padrão e teste

_______________________________________________________________________________
__INSTALANDO COM SQLite________________________________________________________
Rodar
docker run -d -p 80:80 nextcloud

Acesse localhost:80
Escolha um usuário e senha para a conta de administrador
Selecione o banco de dados, no nosso caso deixaremos o SQLite, com a pasta padrão /var/www/html/data.
Deixe selecionado para instalar os aplicativos recomendados (Calendar, Contacts, Talk, Mail e Collaborative Editing)
Clique no botão concluir

_______________________________________________________________________________
FAZENDO O BAKUP DOS DADOS (SQLite)
docker stop 59 1e
cd ~
mkdir nc20
cd nc20
docker cp 59:/var/www/html ./

Compactar o arquivo
tar -czvf html20jun20.tar.gz html

RECUPERAR OS DADOS
cd nc20

Deve ter arquivos compactados
ls

Descompactar o arquivo
Estando no diretório onde a pasta esteja
tar -vzxf html20jun20.tar.gz

Substitua a pasta html no destino (o sistema não perguntará, fará direto)
docker cp ./ 1e:/var/www/

Abra outra tela de terminal
docker exec -it 1e bash
cd /var/www/
mudar o dono de tudo
chown -R www-data html

_______________________________________________________________________________

https://hub.docker.com/_/nextcloud
A safe home for all your data. Access & share your files, calendars, contacts, mail & more from any device, on your terms.

Using an external database
By default this container uses SQLite for data storage, but the Nextcloud setup wizard (appears on first run) allows connecting to an existing MySQL/MariaDB or PostgreSQL database. You can also link a database container, e. g. --link my-mysql:mysql, and then use mysql as the database host on setup. More info is in the docker-compose section.

Persistent data
The Nextcloud installation and all data beyond what lives in the database (file uploads, etc) is stored in the unnamed docker volume volume /var/www/html. The docker daemon will store that data within the docker directory /var/lib/docker/volumes/.... That means your data is saved even if the container crashes, is stopped or deleted.

A named Docker volume or a mounted host directory should be used for upgrades and backups. To achieve this you need one volume for your database container and one for Nextcloud.
/var/www/html/ folder where all Nextcloud data lives

$ docker run -d \
-v nextcloud:/var/www/html \
nextcloud

Database:

/var/lib/mysql MySQL / MariaDB Data

/var/lib/postgresql/data PostgreSQL Data

$ docker run -d \
-v db:/var/lib/mysql \
mariadb

If you want to get fine grained access to your individual files, you can mount additional volumes for data, config, your theme and custom apps. The data, config are stored in respective subfolders inside /var/www/html/. The apps are split into core apps (which are shipped with Nextcloud and you don't need to take care of) and a custom_apps folder. If you use a custom theme it would go into the themes subfolder.

Overview of the folders that can be mounted as volumes:

/var/www/html Main folder, needed for updating
/var/www/html/custom_apps installed / modified apps
/var/www/html/config local configuration
/var/www/html/data the actual data of your Nextcloud
/var/www/html/themes/<YOU_CUSTOM_THEME> theming/branding
If you want to use named volumes for all of these it would look like this

$ docker run -d \
    -v nextcloud:/var/www/html \
    -v apps:/var/www/html/custom_apps \
    -v config:/var/www/html/config \
    -v data:/var/www/html/data \
    -v theme:/var/www/html/themes/<YOUR_CUSTOM_THEME> \
    nextcloud
